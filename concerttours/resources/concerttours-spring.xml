<?xml version="1.0" encoding="UTF-8"?>
<!--
 Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
-->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.1.xsd"
          >
       <!-- CRON JOBS -->
<!--           <alias name="defaultNewsService" alias="newsService" />
<bean id="defaultNewsService" class="concerttours.service.impl.DefaultNewsService">
    <property name="newsDAO" ref="newsDAO" />
</bean>
<bean id="sendNewsJob" class="concerttours.jobs.SendNewsJob" parent="abstractJobPerformable">
    <property name="newsService" ref="newsService" />
    <property name="configurationService" ref="configurationService" />
</bean> -->
          
          <!-- interceptors and custom events -->
          <bean id="bandAlbumSalesInterceptor" class="concerttours.interceptors.BandAlbumSalesInterceptor" />
<bean id="BandInterceptorMapping" class="de.hybris.platform.servicelayer.interceptor.impl.InterceptorMapping">
  <property name="interceptor" ref="bandAlbumSalesInterceptor" />
  <property name="typeCode" value="Band" />
  </bean>
  <bean id="bandAlbumSalesEventListener" class="concerttours.events.BandAlbumSalesEventListener" parent="abstractEventListener" >
  <property name="modelService" ref="modelService" />
  </bean>
   <!--END interceptors and custom events -->
          <!-- Event and Listners -->
          <bean id="concerttourEventListener" class="concerttours.events.NewBandEventListener" parent="abstractEventListener">
  <property name="modelService" ref="modelService" />
</bean>

          <!-- Service layer -->
  <context:component-scan base-package="concerttours"/>
 
 <alias name = "defaultBandService" alias = "bandService" />
<bean id = "defaultBandService" class = "concerttours.service.impl.DefaultBandService" >
<property name = "bandDAO" ref = "bandDAO" />
</bean>
 <!-- END Service layer -->
 <bean id="ConcerttoursCustomSetup" class="concerttours.setup.ConcerttoursCustomSetup" >
  <property name="importService" ref="importService"/>
  </bean>
  
<alias name = "defaultBandFacade" alias = "bandFacade" />
<bean id = "defaultBandFacade" class ="concerttours.facades.impl.DefaultBandFacade" >
    <property name = "bandService" ref = "bandService" />
    <property name="mediaService" ref="mediaService"/>
    <property name="configurationService" ref="configurationService" />
</bean>
<alias name = "defaultTourFacade" alias = "tourFacade" />
<bean id = "defaultTourFacade" class ="concerttours.facades.impl.DefaultTourFacade" >
    <property name = "productService" ref = "productService" />
</bean>
<!-- dynamic attribute -->
<bean id="concertDaysUntilAttributeHandler" class="concerttours.attributehandlers.ConcertDaysUntilAttributeHandler"/>
<!-- END dynamic attribute -->
 <!-- ******************************************************************* default code ******************************************************************* -->
    <bean id="concerttoursSystemSetup" class="concerttours.setup.ConcerttoursSystemSetup">
        <constructor-arg ref="concerttoursService"/>
    </bean>

    <bean id="concerttoursService" class="concerttours.service.impl.DefaultConcerttoursService">
        <property name="modelService" ref="modelService"/>
        <property name="mediaService" ref="mediaService"/>
        <property name="flexibleSearchService" ref="flexibleSearchService"/>
    </bean>
			
</beans>
